import numpy as np
import matplotlib.pyplot as plt
import control as ctrl

# Definición de la función de transferencia
num = [1, 3]
den = [1, 5, 20, 16, 0]

# Crear sistema y lazo cerrado
sys = ctrl.TransferFunction(num, den)
gs = ctrl.feedback(sys, 1)

# Calcular root locus sin graficar automáticamente
rlist, klist = ctrl.rlocus(gs, plot=False)

# Dibujar root locus manualmente
plt.figure(figsize=(8, 6))
for r in rlist.T:
    plt.plot(r.real, r.imag, 'b', label='LGR (rlocus)' if 'LGR (rlocus)' not in plt.gca().get_legend_handles_labels()[1] else "")

# Parámetros para las asíntotas
sigma0 = -2 / 3
x = np.arange(sigma0, 6.1, 0.1)
y1 = np.sqrt(3) * (x - sigma0)
y2 = -y1

# Superponer elementos clave
plt.plot(x, y1, 'k-.', label='Asíntota +60°')
plt.plot(x, y2, 'k-.', label='Asíntota -60°')
plt.plot(sigma0, 0, 'ko', markersize=6, linewidth=1.5, label='Centroide')

# Cruces con el eje imaginario
plt.plot(0, 1.1547, 'bs', markersize=6, linewidth=1, label='Cruce ±j1.15')
plt.plot(0, -1.1547, 'bs', markersize=6, linewidth=1)
plt.plot(0, 3.1409, 'gs', markersize=6, linewidth=1, label='Cruce ±j3.14')
plt.plot(0, -3.1409, 'gs', markersize=6, linewidth=1)

# Puntos de desprendimiento del eje real
plt.plot(-4.2376, 0, 'ko', markersize=6, linewidth=1, label='Desprendimiento eje real')
plt.plot(-0.524, 0, 'ko', markersize=6, linewidth=1)

# Configuración de gráfica
plt.title('Lugar Geométrico de las Raíces con puntos clave')
plt.xlabel('Parte real')
plt.ylabel('Parte imaginaria')
plt.grid(True)
plt.axis('equal')
plt.xlim(-6, 6)
plt.ylim(-6, 6)

# Leyenda sin duplicados
plt.legend(loc='best')

# Mostrar gráfica
plt.show()

